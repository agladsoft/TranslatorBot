import os
import logging
import telebot
import requests
from typing import Optional
from mochi_ import MochiConnect
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from fastapi.responses import JSONResponse
from fastapi import FastAPI, Request, Response
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

app = FastAPI()
bot = telebot.TeleBot(os.environ["TOKEN"])

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
user_cards = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LangChain —Å OpenAI
llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0
)

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
prompt_template = ChatPromptTemplate.from_messages([
    ("system", "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫."),
    ("user", """–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ "{text}".
–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã
2. 3 –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º

–í–ê–ñ–ù–û! –ü–æ—Ä—è–¥–æ–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö:
- –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú - –ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä—ã: [–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä] - [—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥]
- –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú - –ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä—ã: [—Ä—É—Å—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä] - [–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥]

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏.
2. –í –ø—Ä–∏–º–µ—Ä–∞—Ö –í–°–ï–ì–î–ê –ø–µ—Ä–≤—ã–º –∏–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–∞ —è–∑—ã–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ "{text}", –≤—Ç–æ—Ä—ã–º - –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.

–û—Ç–≤–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
–ü–µ—Ä–µ–≤–æ–¥: [–ø–µ—Ä–µ–≤–æ–¥]
–ü—Ä–∏–º–µ—Ä—ã:
1. [–ø—Ä–∏–º–µ—Ä –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —è–∑—ã–∫–µ] - [–ø–µ—Ä–µ–≤–æ–¥]
2. [–ø—Ä–∏–º–µ—Ä –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —è–∑—ã–∫–µ] - [–ø–µ—Ä–µ–≤–æ–¥]
3. [–ø—Ä–∏–º–µ—Ä –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —è–∑—ã–∫–µ] - [–ø–µ—Ä–µ–≤–æ–¥]""")
])

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
translation_chain = prompt_template | llm | StrOutputParser()

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
keyword_prompt = ChatPromptTemplate.from_messages([
    ("system", "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."),
    ("user", """–ò–∑ —Ç–µ–∫—Å—Ç–∞ "{text}" –∏–∑–≤–ª–µ–∫–∏ –û–î–ù–û –≥–ª–∞–≤–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
–ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - –≤–µ—Ä–Ω–∏ –µ–≥–æ.
–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –≤–µ—Ä–Ω–∏ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ.
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.""")
])

keyword_chain = keyword_prompt | llm | StrOutputParser()


def get_image_search_keyword(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        keyword = keyword_chain.invoke({"text": text}).strip()
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: {keyword}")
        return keyword
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        return text.split()[0] if text else text


def get_image_url(query: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Unsplash API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Unsplash API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        access_key = os.getenv("UNSPLASH_ACCESS_KEY")

        if not access_key:
            logger.warning("UNSPLASH_ACCESS_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return None

        url = "https://api.unsplash.com/search/photos"
        params = {
            "query": query,
            "per_page": 1,
            "client_id": access_key
        }

        response = requests.get(url, params=params, timeout=5)

        if response.status_code == 200:
            data = response.json()
            if data.get("results") and len(data["results"]) > 0:
                # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                return data["results"][0]["urls"]["regular"]

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


@bot.message_handler(commands=['start'])
def start_bot(message: Message) -> None:
    logger.info(f"start_bot called by {message.from_user.first_name}")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:\n"
        "‚Ä¢ –†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–µ–¥—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ!"
    )
    bot.send_message(message.chat.id, welcome_text)
    logger.info("start message sent")


@bot.message_handler(func=lambda message: True)
def translate_word(message: Message) -> None:
    logger.info(f"translate_word called for: {message.text}")
    loading_msg = None

    try:
        text = message.text.strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Å –∑–∞–≥—Ä—É–∑–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π URL —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏)
        loading_gif_url = "https://i.gifer.com/8cEp.gif"
        loading_msg = bot.send_animation(
            message.chat.id,
            loading_gif_url,
            caption="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
            reply_to_message_id=message.message_id
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        bot.send_chat_action(message.chat.id, 'typing')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain —Ü–µ–ø–æ—á–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        ai_response = translation_chain.invoke({"text": text})

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
        formatted_response = f"üìù *–°–ª–æ–≤–æ:* {text}\n\n{ai_response}"

        # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
        formatted_response = formatted_response.replace("–ü–µ—Ä–µ–≤–æ–¥:", "*–ü–µ—Ä–µ–≤–æ–¥:*")
        formatted_response = formatted_response.replace("–ü—Ä–∏–º–µ—Ä—ã:", "\n*–ü—Ä–∏–º–µ—Ä—ã:*")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ..."
        bot.send_chat_action(message.chat.id, 'upload_photo')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        search_keyword = get_image_search_keyword(text)

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        image_url = get_image_url(search_keyword)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Mochi
        keyboard = InlineKeyboardMarkup()
        add_to_mochi_btn = InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ Mochi", callback_data=f"add_mochi_{message.message_id}")
        keyboard.add(add_to_mochi_btn)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Mochi
        user_cards[message.message_id] = {
            'word': text,
            'translation': ai_response,
            'image_url': image_url,
            'user_id': message.from_user.id
        }

        if image_url:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π (parse_mode –¥–ª—è markdown)
                bot.send_photo(
                    message.chat.id,
                    image_url,
                    caption=formatted_response,
                    parse_mode='Markdown',
                    reply_markup=keyboard,
                    reply_to_message_id=message.message_id
                )
                logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as img_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                bot.reply_to(message, formatted_response, parse_mode='Markdown', reply_markup=keyboard)
        else:
            logger.info("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            bot.reply_to(message, formatted_response, parse_mode='Markdown', reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º GIF —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
        if loading_msg:
            try:
                bot.delete_message(message.chat.id, loading_msg.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è loading GIF: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        # –£–¥–∞–ª—è–µ–º GIF –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if loading_msg:
            try:
                bot.delete_message(message.chat.id, loading_msg.message_id)
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è loading GIF: {ex}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_mochi_'))
def handle_add_to_mochi(call: CallbackQuery):
    logger.info(f"handle_add_to_mochi called for: {call.data}")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º message_id –∏–∑ callback_data
        message_id = int(call.data.split('_')[2])

        if message_id not in user_cards:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        card_data = user_cards[message_id]

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        mochi_api_key = os.getenv("MOCHI_API_KEY")
        if not mochi_api_key:
            bot.answer_callback_query(
                call.id,
                "‚ùå MOCHI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ",
                show_alert=True
            )
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mochi
        mochi = MochiConnect(mochi_api_key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not mochi.check_connection():
            bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Mochi.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.",
                show_alert=True
            )
            return

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = card_data['user_id']
        user_name = call.from_user.first_name or f"User{user_id}"
        deck_name = f"Vocabulary Bot - {user_name}"

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
        deck_id = mochi.get_or_create_deck(deck_name)

        # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ AI –æ—Ç–≤–µ—Ç–∞
        ai_text = card_data['translation']
        translation = ""
        examples = ""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ (—Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "–ü–µ—Ä–µ–≤–æ–¥:")
        if "–ü–µ—Ä–µ–≤–æ–¥:" in ai_text:
            parts = ai_text.split("–ü–µ—Ä–µ–≤–æ–¥:", 1)[1]
            if "–ü—Ä–∏–º–µ—Ä—ã:" in parts:
                translation = parts.split("–ü—Ä–∏–º–µ—Ä—ã:", 1)[0].strip()
                examples_text = parts.split("–ü—Ä–∏–º–µ—Ä—ã:", 1)[1].strip()
                examples = examples_text
            else:
                translation = parts.strip()

        # –§–æ—Ä–º–∏—Ä—É–µ–º front –∏ back –¥–ª—è Basic flashcard
        # Front - —Å–ª–æ–≤–æ (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        front_text = f"# {card_data['word']}"

        # Back - –ø–µ—Ä–µ–≤–æ–¥ (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä) –∏ –ø—Ä–∏–º–µ—Ä—ã
        back_text = f"## {translation or ai_text}"
        if examples:
            back_text += f"\n\n{examples}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        if mochi.card_exists(deck_id, front_text):
            logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {front_text}")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Mochi!", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            exists_keyboard = InlineKeyboardMarkup()
            exists_btn = InlineKeyboardButton("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", callback_data="done")
            exists_keyboard.add(exists_btn)
            try:
                bot.edit_message_reply_markup(
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=exists_keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            del user_cards[message_id]
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Mochi
        mochi.add_card(
            deck_id=deck_id,
            front_text=front_text,
            back_text=back_text,
            image_url=card_data['image_url']
        )

        logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Mochi: {front_text}")
        bot.answer_callback_query(call.id, "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Mochi!", show_alert=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_keyboard = InlineKeyboardMarkup()
        success_btn = InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Mochi", callback_data="done")
        success_keyboard.add(success_btn)

        try:
            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=success_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        del user_cards[message_id]

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Mochi: {error_msg}")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)


# FastAPI endpoints
@app.get("/")
async def root():
    return {"status": "Bot is running"}


@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        json_data = await request.json()
        logger.info(f"Received update_id: {json_data.get('update_id')}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
        if 'message' in json_data:
            message = telebot.types.Message.de_json(json_data['message'])
            logger.info(f"Message from {message.from_user.first_name}: {message.text}")

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            if message.text and message.text.startswith('/start'):
                start_bot(message)
            else:
                translate_word(message)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
        elif 'callback_query' in json_data:
            callback_query = telebot.types.CallbackQuery.de_json(json_data['callback_query'])
            logger.info(f"Callback query: {callback_query.data}")
            handle_add_to_mochi(callback_query)

        return Response(status_code=200)
    except Exception as e:
        logger.error(f"Error in webhook: {e}", exc_info=True)
        return Response(status_code=500)


@app.get("/set-webhook")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL"""
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        return JSONResponse(
            status_code=400,
            content={"error": "WEBHOOK_URL not set in environment"}
        )

    try:
        bot.remove_webhook()
        bot.set_webhook(url=f"{webhook_url}/webhook")
        return {"status": "Webhook set successfully", "url": webhook_url}
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"error": str(e)}
        )
